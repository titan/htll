(load "core.scm")
(load "dsl.scm")

(define the-global-environment (setup-dsl-environment (setup-environment)))

(define ios-version 'ios5)

(define (parse-file in)
  (let loop ((datum (read in))
             (ast '()))
    (if (eof-object? datum)
        (reverse ast)
        (loop (read in) (cons datum ast)))))

(define (read-file filename)
  (let* ((in (open-input-file filename))
          (ast (parse-file in)))
    (close-input-port in)
    ast))

(define (usage prog)
  (display "Usage: ")
  (display prog)
  (display "[option] action source.htll")
  (newline)
  (display "Options: ")
  (newline)
  (display "-v\t\tgenerate codes for iOS?")
  (newline)
  (display "  ios5\t\t(default)")
  (newline)
  (display "  ios6")
  (newline)
  (newline)
  (display "Actions: ")
  (newline)
  (display "property\t\t\t")
  (display "generate property")
  (newline)
  (display "synthesize\t\t\t")
  (display "generate synthesize")
  (newline)
  (display "view-did-load\t\t\t")
  (display "generate codes for the viewDidLoad method")
  (newline)
  (display "view-will-appear\t\t")
  (display "generate codes for the viewWillAppear method")
  (newline)
  (display "view-will-layout-subviews\t")
  (display "generate codes for the viewWillLayoutSubviews method")
  (newline))

(define (main argv)
  (let ((prog (car argv)))
    (if (>= (length argv) 3)
        (let loop ((args argv)
                   (ver 'ios5)
                   (action 'unknown)
                   (file 'unknown))
          (if (null? args)
              (if (or (eq? action 'unknown) (eq? file 'unknown))
                  (usage prog)
                  (begin
                    (set! ios-version ver)
                    (map (lambda (src) (eval src the-global-environment)) (read-file file))
                    (cond
                     ((eq? action 'property) (generate-property the-global-environment))
                     ((eq? action 'synthesize) (generate-synthesize the-global-environment))
                     ((eq? action 'view-did-load) (generate-view-did-load the-global-environment))
                     ((eq? action 'view-will-appear) (generate-view-will-appear the-global-environment))
                     ((eq? action 'view-will-layout-subviews) (generate-view-will-layout-subviews the-global-environment))
                     ((eq? action 'eval) 'ok)
                     (else (display "Unknown action: ") (display action) (newline) (usage prog)))))
              (let ((arg (car args)))
                (cond
                 ((and (equal? arg "-v") (> (length args) 1))
                  (cond
                   ((equal? (cadr args) "ios5")
                    (loop (cddr args) 'ios5 action file))
                   ((equal? (cadr args) "ios6")
                    (loop (cddr args) 'ios6 action file))
                   (else (usage prog))))
                 ((= (length args) 2)
                  (loop (cddr args) ver (string->symbol arg) (cadr args)))
                 (else (loop (cdr args) ver action file))))))
        (usage prog))))
